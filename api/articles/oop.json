{"title":"深入设计模式","uid":"599551eb5e1f7b604f25fa5edd758c88","slug":"oop","date":"2021-07-19T10:49:36.000Z","updated":"2022-07-20T06:08:56.796Z","comments":true,"path":"api/articles/oop.json","keywords":"动漫 技术 thinkbim","cover":"https://cdn.jsdelivr.net/gh/ThinkBIM/CDN@V1.0/comic/pic_1.jpg","content":"<h2 id=\"面向对象程序设计简介\"><a href=\"#面向对象程序设计简介\" class=\"headerlink\" title=\"面向对象程序设计简介\"></a>面向对象程序设计简介</h2><h3 id=\"面向对象程序设计基础\"><a href=\"#面向对象程序设计基础\" class=\"headerlink\" title=\"面向对象程序设计基础\"></a>面向对象程序设计基础</h3><p>面向对象程序设计（Object-Oriented Programming， 缩写为<strong>OOP</strong>）是一种范式，其基本理念是将数据块及与数据相关的行为封装成为特殊的、名为对象的实体，同时对象实体的生成工作则是基于程序员给出的一系列“蓝图”，这些“蓝图”就是类</p>\n<h4 id=\"对象和类\"><a href=\"#对象和类\" class=\"headerlink\" title=\"对象和类\"></a>对象和类</h4><p>假如你有一只名为卡卡的猫。卡卡是一个对象，也是 猫 <strong>Cat</strong> 这个类的一个实例。每只猫都有许多基本属性： 名字<strong>name</strong> 、 性别 <strong>sex</strong> 、 年龄 <strong>age</strong> 、 体重 <strong>weight</strong> 、毛色 <strong>color</strong> 和最爱的食物等。这些都是该类的成员变量。</p>\n<p>所有猫都有相似的行为： 它们会呼吸 <strong>breathe</strong> 、 进食<strong>eat</strong> 、 奔跑 <strong>run</strong> 、 睡觉 <strong>sleep</strong> 和 喵喵叫 <strong>meow</strong> 。这些都是该类的方法。 成员变量和方法可以统称为类的成员。存储在对象成员变量中的数据通常被称为状态，对象中的所有方法则定义了其行为。 </p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Cat</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$gender</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$age</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$weight</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$color</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//呼吸</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">breathe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//进食</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$food</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//奔跑</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$destination</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//睡觉</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$hours</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//喵喵叫</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">menw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h4 id=\"类层次结构\"><a href=\"#类层次结构\" class=\"headerlink\" title=\"类层次结构\"></a>类层次结构</h4><p>相信大家都已经了解单独的一个类的结构了，但一个实际的程序显然会包含不止一个类。一些类可能会组织起来形成类层次结构。</p>\n<h3 id=\"面向对象程序设计基础-1\"><a href=\"#面向对象程序设计基础-1\" class=\"headerlink\" title=\"面向对象程序设计基础\"></a>面向对象程序设计基础</h3><p>面向对象程序设计的四个基本概念使其区别于其他程序设计范式</p>\n<h4 id=\"抽象\"><a href=\"#抽象\" class=\"headerlink\" title=\"抽象\"></a>抽象</h4><p>当使用面向对象程序设计的理念开发一款程序时，你会将大部分时间用于根据真实世界对象来设计程序中的对象。但是，程序中的对象并不需要能够百分之百准确地反映其原型（极少情况下才需要做到这一点）。实际上，你的对象只需模拟真实对象的特定属性和行为即可，其他内容可以忽略。</p>\n<p><strong>抽象</strong>是一种反映真实世界对象或现象中特定内容的模型，它能高精度地反映所有与特定内容相关的详细信息，同时忽略其他内容。</p>\n<h4 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h4><p><strong>封装</strong>是指一个对象对其他对象隐藏其部分状态和行为，而仅向程序其他部分暴露有限的接口的能力。</p>\n<p><strong>封装</strong>某个内容意味着使用关键字 <strong>private</strong> 私有 来对其进行修饰，这样仅有其所在类中的方法才能访问这些内容。还有一种限制程度较小的关键字 <strong>protected</strong> 保护 ，其所修饰的对象仅允许父类访问其类中的成员。</p>\n<p>绝大部分编程语言的接口和抽象类（或方法）都基于抽象和封装的概念。在现代面向对象的编程语言中，接口机制（通常使用 <strong>interface</strong> 或 <strong>protocol</strong> 关键字来声明）允许你定义对象之间的交互协议。这也是接口仅关心对象行为，以及你不能在接口中声明成员变量的原因之一。</p>\n<h4 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h4><p>多态是指程序能够检测对象所属的实际类，并在当前上下文不知道其真实类型的情况下调用其实现的能力。</p>\n<p>你还可将多态看作是一个对象“假扮”为其他东西（通常是其扩展的类或实现的接口）的能力。在我们的示例中，袋中的狗和猫就相当于是假扮成了一般的动物。 </p>\n<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><p>继承是指在根据已有类创建新类的能力。继承最主要的好处是代码复用。如果你想要创建的类与已有的类差异不大，那也没必要重复编写相同的代码。你只需扩展已有的类并将额外功能放入生成的子类（它会继承父类的成员变量和方法）中即可。</p>\n<p>使用继承后，子类将拥有与其父类相同的接口。如果父类中声明了某个方法，那么你将无法在子类中隐藏该方法。你还必须实现所有的抽象方法，即使它们对于你的子类而言没有意义。</p>\n<p>在绝大多数编程语言中，子类仅能对一个父类进行扩展。另一方面，任何类都可以同时实现多个接口。但是正如我之前提到的那样，如果父类实现了某个接口，那么其所有子类都必须实现该接口。</p>\n<h3 id=\"对象之间的关系\"><a href=\"#对象之间的关系\" class=\"headerlink\" title=\"对象之间的关系\"></a>对象之间的关系</h3><h4 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h4><p><strong>依赖</strong>是类之间最基础的、也是最微弱的关系类型。如果修改一个类的定义可能会造成另一个类的变化，那么这两个类之间就存在依赖关系。当你在代码中使用具体类的名称时，通常意味着存在依赖关系。例如在指定方法签名类型时，或是通过调用构造函数对对象进行初始化时等。通过让代码依赖接口或抽象类（而不是具体类），你可以降低其依赖程度。通常情况下，UML 图不会展示所有依赖——它们在真实代码中的数量太多了。为了不让依赖关系破坏 UML 图，你必须对其进行精心选择，仅展示那些对于沟通你的想法来说重要的依赖关系。</p>\n<h4 id=\"关联\"><a href=\"#关联\" class=\"headerlink\" title=\"关联\"></a>关联</h4><p><strong>关联</strong>是一个对象使用另一对象或与另一对象进行交互的关系。 在 UML 图中，关联关系用起始于一个对象并指向其所使用的对象的简单箭头来表示。顺带一提，双向关联也是完全正常的，这种情况就用双向箭头来表示。关联可视为一种特殊类型的依赖，即一个对象总是拥有访问与其交互的对象的权限，而简单的依赖关系并不会在对象间建立永久性的联系。一般来说，你可以使用关联关系来表示类似于类成员变量的东西。这个关系将一直存在，因此你总能通过“订单”来获取其“顾客”。但是它并非一定是成员变量。如果你根据接口来创建类，它也可以表示为一个可返回“订单”的“顾客”的方法。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/ThinkBIM/CDN@main/oop/image-031.png\" style=\"zoom:50%;\"  alt=\"\"/>\n\n<p>• 依赖：对类 B 进行修改会影响到类 A 。 </p>\n<p>• 关联：对象 A 知道对象 B。类 A 依赖于类 B。</p>\n<p>• 聚合：对象 A 知道对象 B 且由 B 构成。类 A 依赖于类 B。 </p>\n<p>• 组合：对象 A 知道对象 B、由 B 构成而且管理着 B 的生命周期。类 A 依赖于类 B。 </p>\n<p>• 实现：类 A 定义的方法由接口 B 声明。对象 A 可被视为对象B。类 A 依赖于类 B。 </p>\n<p>• 继承： 类 A 继承类 B 的接口和实现， 但是可以对其进行扩展。对象 A 可被视为对象 B。类 A 依赖于类 B。</p>\n","feature":true,"text":"面向对象程序设计简介面向对象程序设计基础面向对象程序设计（Object-Oriented Programming， 缩写为OOP）是一种范式，其基本理念是将数据块及与数据相关的行为封装成为特殊的、名为对象的实体，同时对象实体的生成工作则是基于程序员给出的一系列“蓝图”，这些“蓝图...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"OOP","slug":"OOP","count":1,"path":"api/categories/OOP.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">面向对象程序设计简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">面向对象程序设计基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB\"><span class=\"toc-text\">对象和类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">类层次结构</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-1\"><span class=\"toc-text\">面向对象程序设计基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8A%BD%E8%B1%A1\"><span class=\"toc-text\">抽象</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">封装</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%80%81\"><span class=\"toc-text\">多态</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">继承</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">对象之间的关系</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">依赖</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E8%81%94\"><span class=\"toc-text\">关联</span></a></li></ol></li></ol></li></ol>","author":{"name":"ThinkBIM","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/ThinkBIM/CDN@V1.0/logo.png","link":"/","description":"爱看动漫的技术菜鸟","socials":{"github":"https://github.com/ThinkBIM","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/thinkbim","zhihu":"https://www.zhihu.com/people/thinkbim","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"微服务概念","uid":"7b39399b8e45ac7f47e70bebd3f78809","slug":"microservices_concept","date":"2022-06-30T04:00:00.000Z","updated":"2022-07-20T06:08:56.796Z","comments":true,"path":"api/articles/microservices_concept.json","keywords":"动漫 技术 thinkbim","cover":"https://cdn.jsdelivr.net/gh/ThinkBIM/CDN@V1.0/comic/pic_1.jpg","text":"围绕业务功能构建的，服务关注单一业务，服务间采用轻量级的通信机制，可以全自动独立部署，可以使用不同的编程语言和数据存储技术。微服务架构通过业务拆分实现服务组件化，通过组件组合快速开发系统，业务单一的服务组件又可以独立部署，使得整个系统变得清晰灵活 API GateWay APP-...","link":"","photos":[],"count_time":{"symbolsCount":224,"symbolsTime":"1 mins."},"categories":[{"name":"Hexo","slug":"Hexo","count":2,"path":"api/categories/Hexo.json"}],"tags":[{"name":"Microservices","slug":"Microservices","count":1,"path":"api/tags/Microservices.json"}],"author":{"name":"ThinkBIM","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/ThinkBIM/CDN@V1.0/logo.png","link":"/","description":"爱看动漫的技术菜鸟","socials":{"github":"https://github.com/ThinkBIM","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/thinkbim","zhihu":"https://www.zhihu.com/people/thinkbim","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Git常用命令","uid":"4816b0a206bfef8c348af34a04c98354","slug":"git","date":"2021-07-19T10:49:36.000Z","updated":"2022-07-20T06:08:56.796Z","comments":true,"path":"api/articles/git.json","keywords":"动漫 技术 thinkbim","cover":"https://cdn.jsdelivr.net/gh/ThinkBIM/CDN@V1.0/comic/pic_1.jpg","text":"git 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件 查看远端和本地分支git branch -a * main master remotes/o...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"Git","slug":"Git","count":1,"path":"api/categories/Git.json"}],"tags":[{"name":"CMD","slug":"CMD","count":4,"path":"api/tags/CMD.json"}],"author":{"name":"ThinkBIM","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/ThinkBIM/CDN@V1.0/logo.png","link":"/","description":"爱看动漫的技术菜鸟","socials":{"github":"https://github.com/ThinkBIM","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/thinkbim","zhihu":"https://www.zhihu.com/people/thinkbim","csdn":"","juejin":"","customs":{}}},"feature":true}}