[{"id":"7b39399b8e45ac7f47e70bebd3f78809","title":"微服务概念","content":"围绕业务功能构建的，服务关注单一业务，服务间采用轻量级的通信机制，可以全自动独立部署，可以使用不同的编程语言和数据存储技术。微服务架构通过业务拆分实现服务组件化，通过组件组合快速开发系统，业务单一的服务组件又可以独立部署，使得整个系统变得清晰灵活\nAPI GateWay\nAPP-Interface\n单点服务\nBFF（聚合、适配层）\nSOC（关注分离）\nSSR（服务端渲染）\nELB（负载均衡）\nCQRS（命令端、查询端）\nRPC（远程过程调用）\n","slug":"microservices_concept","date":"2022-06-30T04:00:00.000Z","categories_index":"Hexo","tags_index":"Microservices","author_index":"ThinkBIM"},{"id":"599551eb5e1f7b604f25fa5edd758c88","title":"深入设计模式","content":"面向对象程序设计简介面向对象程序设计基础面向对象程序设计（Object-Oriented Programming， 缩写为OOP）是一种范式，其基本理念是将数据块及与数据相关的行为封装成为特殊的、名为对象的实体，同时对象实体的生成工作则是基于程序员给出的一系列“蓝图”，这些“蓝图”就是类\n对象和类假如你有一只名为卡卡的猫。卡卡是一个对象，也是 猫 Cat 这个类的一个实例。每只猫都有许多基本属性： 名字name 、 性别 sex 、 年龄 age 、 体重 weight 、毛色 color 和最爱的食物等。这些都是该类的成员变量。\n所有猫都有相似的行为： 它们会呼吸 breathe 、 进食eat 、 奔跑 run 、 睡觉 sleep 和 喵喵叫 meow 。这些都是该类的方法。 成员变量和方法可以统称为类的成员。存储在对象成员变量中的数据通常被称为状态，对象中的所有方法则定义了其行为。 \nclass Cat\n&#123;\n    public $name;\n    public $gender;\n    private $age;\n    private $weight;\n    private $color;\n\n    //呼吸\n    public function breathe()&#123;&#125;\n    \n    //进食\n    public function eat($food)&#123;&#125;\n    \n    //奔跑\n    public function run($destination)&#123;&#125;\n    \n    //睡觉\n    public function sleep($hours)&#123;&#125;\n    \n    //喵喵叫\n    public function menw()&#123;&#125;\n&#125;\n\n\n\n\n\n类层次结构相信大家都已经了解单独的一个类的结构了，但一个实际的程序显然会包含不止一个类。一些类可能会组织起来形成类层次结构。\n面向对象程序设计基础面向对象程序设计的四个基本概念使其区别于其他程序设计范式\n抽象当使用面向对象程序设计的理念开发一款程序时，你会将大部分时间用于根据真实世界对象来设计程序中的对象。但是，程序中的对象并不需要能够百分之百准确地反映其原型（极少情况下才需要做到这一点）。实际上，你的对象只需模拟真实对象的特定属性和行为即可，其他内容可以忽略。\n抽象是一种反映真实世界对象或现象中特定内容的模型，它能高精度地反映所有与特定内容相关的详细信息，同时忽略其他内容。\n封装封装是指一个对象对其他对象隐藏其部分状态和行为，而仅向程序其他部分暴露有限的接口的能力。\n封装某个内容意味着使用关键字 private 私有 来对其进行修饰，这样仅有其所在类中的方法才能访问这些内容。还有一种限制程度较小的关键字 protected 保护 ，其所修饰的对象仅允许父类访问其类中的成员。\n绝大部分编程语言的接口和抽象类（或方法）都基于抽象和封装的概念。在现代面向对象的编程语言中，接口机制（通常使用 interface 或 protocol 关键字来声明）允许你定义对象之间的交互协议。这也是接口仅关心对象行为，以及你不能在接口中声明成员变量的原因之一。\n多态多态是指程序能够检测对象所属的实际类，并在当前上下文不知道其真实类型的情况下调用其实现的能力。\n你还可将多态看作是一个对象“假扮”为其他东西（通常是其扩展的类或实现的接口）的能力。在我们的示例中，袋中的狗和猫就相当于是假扮成了一般的动物。 \n继承继承是指在根据已有类创建新类的能力。继承最主要的好处是代码复用。如果你想要创建的类与已有的类差异不大，那也没必要重复编写相同的代码。你只需扩展已有的类并将额外功能放入生成的子类（它会继承父类的成员变量和方法）中即可。\n使用继承后，子类将拥有与其父类相同的接口。如果父类中声明了某个方法，那么你将无法在子类中隐藏该方法。你还必须实现所有的抽象方法，即使它们对于你的子类而言没有意义。\n在绝大多数编程语言中，子类仅能对一个父类进行扩展。另一方面，任何类都可以同时实现多个接口。但是正如我之前提到的那样，如果父类实现了某个接口，那么其所有子类都必须实现该接口。\n对象之间的关系依赖依赖是类之间最基础的、也是最微弱的关系类型。如果修改一个类的定义可能会造成另一个类的变化，那么这两个类之间就存在依赖关系。当你在代码中使用具体类的名称时，通常意味着存在依赖关系。例如在指定方法签名类型时，或是通过调用构造函数对对象进行初始化时等。通过让代码依赖接口或抽象类（而不是具体类），你可以降低其依赖程度。通常情况下，UML 图不会展示所有依赖——它们在真实代码中的数量太多了。为了不让依赖关系破坏 UML 图，你必须对其进行精心选择，仅展示那些对于沟通你的想法来说重要的依赖关系。\n关联关联是一个对象使用另一对象或与另一对象进行交互的关系。 在 UML 图中，关联关系用起始于一个对象并指向其所使用的对象的简单箭头来表示。顺带一提，双向关联也是完全正常的，这种情况就用双向箭头来表示。关联可视为一种特殊类型的依赖，即一个对象总是拥有访问与其交互的对象的权限，而简单的依赖关系并不会在对象间建立永久性的联系。一般来说，你可以使用关联关系来表示类似于类成员变量的东西。这个关系将一直存在，因此你总能通过“订单”来获取其“顾客”。但是它并非一定是成员变量。如果你根据接口来创建类，它也可以表示为一个可返回“订单”的“顾客”的方法。\n\n\n• 依赖：对类 B 进行修改会影响到类 A 。 \n• 关联：对象 A 知道对象 B。类 A 依赖于类 B。\n• 聚合：对象 A 知道对象 B 且由 B 构成。类 A 依赖于类 B。 \n• 组合：对象 A 知道对象 B、由 B 构成而且管理着 B 的生命周期。类 A 依赖于类 B。 \n• 实现：类 A 定义的方法由接口 B 声明。对象 A 可被视为对象B。类 A 依赖于类 B。 \n• 继承： 类 A 继承类 B 的接口和实现， 但是可以对其进行扩展。对象 A 可被视为对象 B。类 A 依赖于类 B。\n","slug":"oop","date":"2021-07-19T10:49:36.000Z","categories_index":"OOP","tags_index":"","author_index":"ThinkBIM"},{"id":"4816b0a206bfef8c348af34a04c98354","title":"Git常用命令","content":"git 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件\n查看远端和本地分支git branch -a\n* main\n  master\n  remotes/origin/main\n  remotes/origin/master\n\n#删除本地分支\ngit branch -d master\nDeleted branch master (was 066fcc4).\n\n#删除远端分支\ngit push origin --delete master\nTo https://github.com/HateGhost/ThinkBIM.git\n - [deleted]         master\n\n更改URLgit remote -v\norigin\thttps://github.com/HateGhost/ThinkBIM.git (fetch)\norigin\thttps://github.com/HateGhost/ThinkBIM.git (push)\n\ngit remote set-url origin https://github.com/ThinkBIM/ThinkBIM.git\n\n\n\ngit clone -b dev_jk http://10.1.1.11/service/tmall-service.git\n\n\n删除分支\n\n\n\n\n\n\n\n\n删除本地分支\ngit branch -d localBranchName\n\n\n\n\n\n\n\n\n\n\n删除远端分支\ngit push origin --delete develop\n\n创建分支克隆指定分支git clone -b dev git.thinkbim.cn\n\n\n\n撤销 git addgit reset --mixed\ngit reset HEAD .\ngit reset HEAD 文件\n\ntag# 删除本地\ngit tag -d v1.0 \n# 删除远端\ngit push origin :refs/tags/v1.0\n\n\nF&amp;Qgit push origin --delete develop\nremote: GitLab: The default branch of a project cannot be deleted.\nTo git.jxqianbao.com:server/finance.git\n ! [remote rejected] develop (pre-receive hook declined)\nerror: failed to push some refs to 'git@git.demo.com:server/finance.git'\n\n\ngit clone https://github.com/ThinkBIM/comic.git\nCloning into 'comic'...\nfatal: unable to access 'https://github.com/ThinkBIM/comic.git/': Encountered end of file\ngit config --global --unset http.proxy\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"git","date":"2021-07-19T10:49:36.000Z","categories_index":"Git","tags_index":"CMD","author_index":"ThinkBIM"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"数据结构\n严蔚敏\n吴伟民\n高一凡\n黄国瑜\n衡量算法标准\n*时间复杂度（大概程序要执行的次数，而非执行的时间）\n*空间复杂度（算法执行过程中大概所占用的最大内存）\n难易程度\n健壮性\n\n","slug":"data","date":"2022-07-20T06:10:00.372Z","categories_index":"","tags_index":"","author_index":"ThinkBIM"},{"id":"a9983badd6f0175985f109aa3bd52434","title":"Process","content":"进程 Process孤儿进程父进程不在了，子进程还在运行\n僵尸进程一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵尸进程\n守护进程后台服务进程  &amp;\nPost not found: /page/go/sort 你好\n","slug":"process","date":"2021-08-17T07:47:36.000Z","categories_index":"Go","tags_index":"","author_index":"ThinkBIM"},{"id":"c84b6d5483d961b6dab0d4b33336d057","title":"使用 PHP-FFMpeg 操作视频/音频文件","content":"使用 PHP-FFMpeg 操作视频&#x2F;音频文件安装composer require php-ffmpeg&#x2F;php-ffmpeg\n\n获取视频信息\n$url = \"视频地址\";\n\n//参数配置\n$mpegConf = [\n  'ffmpeg.binaries' => env('ffmpeg.ffmpeg'), //ffmpeg bin目录\n  'ffprobe.binaries' => env('ffmpeg.ffprobe'),//ffprobe bin目录\n  'timeout' => 3600,\n  'ffmpeg.threads' => 12\n];\n$ffmpeg = FFMpeg::create($mpegConf);\n$video = $ffmpeg->open($url);\n//视频的视频信I（width, height, duration）\n$videoInfo = $video->getStreams()->videos()->first()->all();\n\n\nArray\n(\n    [index] => 0\n    [codec_name] => h264\n    [codec_long_name] => H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10\n    [profile] => High\n    [codec_type] => video\n    [codec_tag_string] => avc1\n    [codec_tag] => 0x31637661\n    [width] => 544\n    [height] => 960\n    [coded_width] => 544\n    [coded_height] => 960\n    [closed_captions] => 0\n    [has_b_frames] => 1\n    [pix_fmt] => yuv420p\n    [level] => 31\n    [color_range] => tv\n    [color_space] => bt709\n    [color_transfer] => bt709\n    [color_primaries] => bt709\n    [chroma_location] => left\n    [refs] => 1\n    [is_avc] => true\n    [nal_length_size] => 4\n    [r_frame_rate] => 30/1\n    [avg_frame_rate] => 30/1\n    [time_base] => 1/600\n    [start_pts] => 0\n    [start_time] => 0.000000\n    [duration_ts] => 9000\n    [duration] => 15.000000\n    [bit_rate] => 1014409\n    [bits_per_raw_sample] => 8\n    [nb_frames] => 450\n    [disposition] => Array\n        (\n            [default] => 1\n            [dub] => 0\n            [original] => 0\n            [comment] => 0\n            [lyrics] => 0\n            [karaoke] => 0\n            [forced] => 0\n            [hearing_impaired] => 0\n            [visual_impaired] => 0\n            [clean_effects] => 0\n            [attached_pic] => 0\n            [timed_thumbnails] => 0\n        )\n\n    [tags] => Array\n        (\n            [creation_time] => 2021-04-14T01:27:05.000000Z\n            [language] => und\n            [handler_name] => Core Media Video\n            [vendor_id] => [0][0][0][0]\n        )\n\n)\n\n\n\n\n获取视频大小\n\n$mpegConf = [\n  'ffmpeg.binaries' => env('ffmpeg.ffmpeg'),\n  'ffprobe.binaries' => env('ffmpeg.ffprobe'),\n  'timeout' => 3600,\n  'ffmpeg.threads' => 12\n];\n$ffprobe = FFProbe::create($mpegConf);\n$videoInfo = $ffprobe->format($remotefilename)->all();\n\n//获取视频大小\n$size = $ffprobe->format($remotefilename)->get('size');\n//获取视频时长\n$duration = $ffprobe->format($remotefilename)->get('duration');\n\n//! ---------videoInfo--------\nArray\n(\n    [filename] => /Desktop/1618363630035895.mp4\n    [nb_streams] => 2\n    [nb_programs] => 0\n    [format_name] => mov,mp4,m4a,3gp,3g2,mj2\n    [format_long_name] => QuickTime / MOV\n    [start_time] => 0.000000\n    [duration] => 15.000000\n    [size] => 2018388\n    [bit_rate] => 1076473\n    [probe_score] => 100\n    [tags] => Array\n        (\n            [major_brand] => mp42\n            [minor_version] => 1\n            [compatible_brands] => isommp41mp42\n            [creation_time] => 2021-04-14T01:27:05.000000Z\n            [copyright] => \n            [copyright-eng] => \n        )\n\n)\n\n\n\n视频截取//tempnam创建一个具有唯一文件名的临时文件\n$localtempfilename = tempnam(ini_get('upload_tmp_dir'), 'hc-cover');\n//截取视频，报错到临时文件\n$video->frame(TimeCode::fromSeconds(0))->save($localtempfilename);\n//给指定文件的内容生成哈希值\n$videoCoverMd5 = hash_file('md5', $localtempfilename) . '_0.jpg';\n\n\n\n\n\n参考资料\n","slug":"ffmpeg","date":"2021-07-29T09:30:00.000Z","categories_index":"PHP","tags_index":"ffmpeg","author_index":"ThinkBIM"},{"id":"330d911a867eb710c7f804b3c058847c","title":"Liunx问题总结","content":"Liunx问题总结解决GitLab内存消耗大的问题\n","slug":"liunx","date":"2021-07-22T01:47:36.000Z","categories_index":"","tags_index":"","author_index":"ThinkBIM"},{"id":"d6849f80e1e300cf37c038a776288648","title":"LEFT JOIN  查询结果不是左表的全部数据的解决方法","content":"LEFT JOIN  查询结果不是左表的全部数据的解决方法LEFT JOIN 查询语句调用小技巧\n\n\n\n\n\n\n\n\n\n常见以下查询，但是发现查询结果A表的数据不是全部数据？\nSELECT\n    a.id b.id,\n\t...\nFROM\n\tA a\n\tLEFT JOIN B b ON a.id = b.id\nWHERE\n    a.name = 'xxx'\n  AND b.name = 'xxx'\n\n\n\n\n\n\n\n\n\n\n如果过滤条件是A表的字段  例如：a.xx &#x3D; ‘xxx’\nSELECT\n    a.id b.id,\n\t...\nFROM\n\tA a\n\tLEFT JOIN B b ON a.id = b.id\nWHERE\n    a.name = 'xxx'\n\n\n\n\n\n\n\n\n\n\n如果过滤的是B表的字段  例如：b.xx &#x3D; ‘xxx’\nSELECT\n    a.id b.id,\n\t...\nFROM\n\tA a\n\tLEFT JOIN B b ON a.id = b.id and b.name='xxx'\n\n\n\n\n\n\n\n\n\n\n如果同时过滤2个表的字段\nSELECT\n\ta.id b.id,\n\t...\nFROM\n\tA a\n\tLEFT JOIN B b ON a.id = b.id and AND b.NAME = 'xxx'\nWHERE\n\ta.NAME = 'xxx' \n","slug":"mysql","date":"2021-07-22T01:47:36.000Z","categories_index":"MySQL","tags_index":"","author_index":"ThinkBIM"},{"id":"b7bf86540a00ca68708b5154fb0c8566","title":"Docker容器常用命令-Container","content":"exec在运行的容器中执行命令\n命令格式docker exec [OPTIONS] CONTAINER COMMAND [ARG...]\n\n常用参数\n-d 分离模式: 在后台运行\n\n-i 即使没有附加也保持STDIN 打开\n\n-t 分配一个伪终端\n\n\n使用示例# 指定容器名称\ndocker exec -it webserver /bin/bash\n\n# 指定容器ID\ndocker exec -it 9df70f9a0714 /bin/bash\n\n\n\nps列出容器\n命令格式docker ps [OPTIONS]\n\n常用参数\n-a : 显示所有的容器，包括未运行的。\n\n-f : 根据条件过滤显示的内容。\n\n–format : 指定返回值的模板文件。\n\n-l : 显示最近创建的容器。\n\n-n : 列出最近创建的n个容器。\n\n–no-trunc : 不截断输出。\n\n-q : 静默模式，只显示容器编号。\n\n-s : 显示总的文件大小。\n\n\n使用示例# 显示运行中的容器\ndocker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES\n531d1da7106a        nginx               \"/docker-entrypoint.…\"   10 hours ago        Up 34 minutes       0.0.0.0:8000->80/tcp   webserver\n\n# 显示所有容器\ndocker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                   PORTS                  NAMES\n531d1da7106a        nginx               \"/docker-entrypoint.…\"   10 hours ago        Up 34 minutes            0.0.0.0:8000->80/tcp   webserver\nd71dcdf7c42b        docker101tutorial   \"/docker-entrypoint.…\"   8 weeks ago         Exited (0) 6 weeks ago                          docker-tutorial\n\n\n返回说明CONTAINER ID: 容器 ID。\nIMAGE: 使用的镜像。\nCOMMAND: 启动容器时运行的命令。\nCREATED: 容器的创建时间。\nSTATUS: 容器状态。\n状态有7种：\n\ncreated（已创建）\n\nrestarting（重启中）\n\nrunning（运行中）\n\nremoving（迁移中）\n\npaused（暂停）\n\nexited（停止）\n\ndead（死亡）\n\n\nPORTS: 容器的端口信息和使用的连接类型（tcp\\udp）。\nNAMES: 自动分配的容器名称\nrun创建一个新的容器并运行一个命令\n命令格式docker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n\n常用参数\n-a stdin: 指定标准输入输出内容类型，可选 STDIN&#x2F;STDOUT&#x2F;STDERR 三项；\n\n-d: 后台运行容器，并返回容器ID；\n\n-i: 以交互模式运行容器，通常与 -t 同时使用；\n\n-P: 随机端口映射，容器内部端口随机映射到主机的端口\n\n-p: 指定端口映射，格式为：主机(宿主)端口:容器端口\n\n-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n\n–name&#x3D;”nginx-lb”: 为容器指定一个名称；\n\n–dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；\n\n–dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；\n\n-h “mars”: 指定容器的hostname；\n\n-e username&#x3D;”ritchie”: 设置环境变量；\n\n–env-file&#x3D;[]: 从指定文件读入环境变量；\n\n–cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2”: 绑定容器到指定CPU运行；\n\n-m : 设置容器使用内存最大值；\n\n–net&#x3D;”bridge”: 指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container: 四种类型；\n\n–link&#x3D;[]: 添加链接到另一个容器；\n\n–expose&#x3D;[]: 开放一个端口或一组端口；\n\n–volume , -v: 绑定一个卷\n\n\n使用示例docker run hello-world\ndocker run --name mywebserver -it nginx\n\n#后台运行 -d \ndocker run --name mywebserver -itd nginx\n#指定端口，后台运行\ndocker run --name webserver -p 8000:80 -itd nginx\n86da2b0476d5eac511d70c19efdd49fd4774ab3e415eceb84a3e77074ff7994f\n\n#查看绑定端口\ndocker port webserver\n80/tcp -> 0.0.0.0:8000\n\n#link\n\n\n\n\n\n\n\n\n\n\n如果build启动服务，-itd 后台运行 exec 进入容器\n#进入容器，退出自动删除容器\ndocker run -it --rm --name mynginx mynginx:v2 bash\n\nrm在运行的容器中执行命令\n命令格式docker rm [OPTIONS] CONTAINER [CONTAINER...]\n\n常用参数\n-f : 通过 SIGKILL 信号强制删除一个运行中的容器。\n\n-l : 移除容器间的网络连接，而非容器本身。\n\n-v : 删除与容器关联的卷。\n\n\n使用示例# 指定名称\ndocker rm mywebserver\n# 指定ID\ndocker rm e6ede0e117ab\n\n#强制删除容器 db01、db02\ndocker rm -f db01 db02\n\n\n\ntop查看容器中运行的进程信息，支持 ps 命令参数\n命令格式docker top [OPTIONS] CONTAINER [ps OPTIONS]\n\n\n使用示例docker top webserver\nPID                 USER                TIME                COMMAND\n1704                root                0:00                nginx: master process nginx -g daemon off;\n1755                101                 0:00                nginx: worker process\ndocker top webserver 1755\nPID                 USER                TIME                COMMAND\n1704                root                0:00                nginx: master process nginx -g daemon off;\n1755                101                 0:00                nginx: worker process\n\n\n\n\n\n\nexport将文件系统作为一个tar归档文件导出到STDOUT，本地归档\n命令格式docker export [OPTIONS] CONTAINER\n\n常用参数\n** :** 将输入内容写到文件\n\n使用示例docker export -o webserver.tar webserver\nls\nDockerfile    webserver.tar\n\nport列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口\n使用示例docker port webserver\n80/tcp -> 0.0.0.0:8000\n\n\nlogs获取容器的日志\n命令格式docker logs [OPTIONS] CONTAINER\n\n常用参数\n-f : 跟踪日志输出\n\n–since : 显示某个开始时间的所有日志\n\n-t : 显示时间戳\n\n–tail : 仅列出最新N条容器日志\n\n\n使用示例docker logs webserver\n/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\n/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh\n10-listen-on-ipv6-by-default.sh: Getting the checksum of /etc/nginx/conf.d/default.conf\n10-listen-on-ipv6-by-default.sh: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh\n/docker-entrypoint.sh: Configuration complete; ready for start up\n172.17.0.1 - - [20/Oct/2020:15:59:52 +0000] \"GET / HTTP/1.1\" 304 0 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.80 Safari/537.36\" \"-\"\n172.17.0.1 - - [20/Oct/2020:16:15:39 +0000] \"GET / HTTP/1.1\" 304 0 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.80 Safari/537.36\" \"-\"\n172.17.0.1 - - [20/Oct/2020:16:15:42 +0000] \"GET / HTTP/1.1\" 304 0 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.80 Safari/537.36\" \"-\"\n/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\n/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh\n10-listen-on-ipv6-by-default.sh: error: IPv6 listen already enabled\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh\n/docker-entrypoint.sh: Configuration complete; ready for start up\n\nkill杀掉一个运行中的容器\n命令格式docker kill [OPTIONS] CONTAINER [CONTAINER...]\n\n使用示例docker kill webserver\n\n\n\n\n\ncp用于容器与主机之间的数据拷贝\n命令格式docker diff [OPTIONS] CONTAINER\n\n\n使用示例# 本地复制到容器\ndocker cp /etc/hosts webserver:/tmp/\n# 容器复制到本地\ndocker cp webserver:/tmp/hosts ./\n\n\n\ncommit从容器创建一个新的镜像\n命令格式docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n\n常用参数\n-a : 提交的镜像作者；\n\n-c : 使用Dockerfile指令来创建镜像；\n\n-m : 提交时的说明文字；\n\n-p : 在commit时，将容器暂停。\n\n\n使用示例docker commit -a 'xx' -m 'xxx' webserver webserver:v1\nsha256:a3038edc18d1fe39c43ff90c5ac765bd9b1246ff4b03a430c95651e94d38df2a\ndocker history webserver\nError response from daemon: No such image: webserver:latest\ndocker history webserver:vq\nError response from daemon: No such image: webserver:vq\ndocker history webserver:v1\nIMAGE               CREATED             CREATED BY                                      SIZE                COMMENT\na3038edc18d1        19 seconds ago      nginx -g daemon off;                            2.23kB              xxx\nf35646e83998        7 days ago          /bin/sh -c #(nop)  CMD [\"nginx\" \"-g\" \"daemon…   0B                  \n\n\n\ndiff检查容器里文件结构的更改\n命令格式docker diff [OPTIONS] CONTAINER\n\n\n使用示例docker diff webserver\nC /tmp\nA /tmp/hosts\nC /run\n\n\n\nrename重命名容器\n命令格式docker rename CONTAINER NEW_NAME\n\n\n使用示例docker rename mywebserver webserver\n\n\n\ninspect获取容器&#x2F;镜像的元数据\n命令格式docker inspect [OPTIONS] NAME|ID [NAME|ID...]\n\n常用参数\n-f : 指定返回值的模板文件\n\n-s : 显示总的文件大小\n\n–type : 为指定类型返回JSON\n\n\n使用示例\ninspect\ndocker inspect webserver\n[\n    &#123;\n        \"Id\": \"531d1da7106a9b436f826e48ea213f251510edcc1b4e8e22d1b7ed2abca86996\",\n        \"Created\": \"2020-10-20T15:59:22.7661026Z\",\n        \"Path\": \"/docker-entrypoint.sh\",\n        \"Args\": [\n            \"nginx\",\n            \"-g\",\n            \"daemon off;\"\n        ],\n        \"State\": &#123;\n            \"Status\": \"running\",\n            \"Running\": true,\n            \"Paused\": false,\n            \"Restarting\": false,\n            \"OOMKilled\": false,\n            \"Dead\": false,\n            \"Pid\": 1704,\n            \"ExitCode\": 0,\n            \"Error\": \"\",\n            \"StartedAt\": \"2020-10-21T01:43:28.0403569Z\",\n            \"FinishedAt\": \"2020-10-20T16:17:30.9283364Z\"\n        &#125;,\n        \"Image\": \"sha256:f35646e83998b844c3f067e5a2cff84cdf0967627031aeda3042d78996b68d35\",\n        \"ResolvConfPath\": \"/var/lib/docker/containers/531d1da7106a9b436f826e48ea213f251510edcc1b4e8e22d1b7ed2abca86996/resolv.conf\",\n        \"HostnamePath\": \"/var/lib/docker/containers/531d1da7106a9b436f826e48ea213f251510edcc1b4e8e22d1b7ed2abca86996/hostname\",\n        \"HostsPath\": \"/var/lib/docker/containers/531d1da7106a9b436f826e48ea213f251510edcc1b4e8e22d1b7ed2abca86996/hosts\",\n        \"LogPath\": \"/var/lib/docker/containers/531d1da7106a9b436f826e48ea213f251510edcc1b4e8e22d1b7ed2abca86996/531d1da7106a9b436f826e48ea213f251510edcc1b4e8e22d1b7ed2abca86996-json.log\",\n        \"Name\": \"/webserver\",\n        \"RestartCount\": 0,\n        \"Driver\": \"overlay2\",\n        \"Platform\": \"linux\",\n        \"MountLabel\": \"\",\n        \"ProcessLabel\": \"\",\n        \"AppArmorProfile\": \"\",\n        \"ExecIDs\": null,\n        \"HostConfig\": &#123;\n            \"Binds\": null,\n            \"ContainerIDFile\": \"\",\n            \"LogConfig\": &#123;\n                \"Type\": \"json-file\",\n                \"Config\": &#123;&#125;\n            &#125;,\n            \"NetworkMode\": \"default\",\n            \"PortBindings\": &#123;\n                \"80/tcp\": [\n                    &#123;\n                        \"HostIp\": \"\",\n                        \"HostPort\": \"8000\"\n                    &#125;\n                ]\n            &#125;,\n            \"RestartPolicy\": &#123;\n                \"Name\": \"no\",\n                \"MaximumRetryCount\": 0\n            &#125;,\n            \"AutoRemove\": false,\n            \"VolumeDriver\": \"\",\n            \"VolumesFrom\": null,\n            \"CapAdd\": null,\n            \"CapDrop\": null,\n            \"Capabilities\": null,\n            \"Dns\": [],\n            \"DnsOptions\": [],\n            \"DnsSearch\": [],\n            \"ExtraHosts\": null,\n            \"GroupAdd\": null,\n            \"IpcMode\": \"private\",\n            \"Cgroup\": \"\",\n            \"Links\": null,\n            \"OomScoreAdj\": 0,\n            \"PidMode\": \"\",\n            \"Privileged\": false,\n            \"PublishAllPorts\": false,\n            \"ReadonlyRootfs\": false,\n            \"SecurityOpt\": null,\n            \"UTSMode\": \"\",\n            \"UsernsMode\": \"\",\n            \"ShmSize\": 67108864,\n            \"Runtime\": \"runc\",\n            \"ConsoleSize\": [\n                0,\n                0\n            ],\n            \"Isolation\": \"\",\n            \"CpuShares\": 0,\n            \"Memory\": 0,\n            \"NanoCpus\": 0,\n            \"CgroupParent\": \"\",\n            \"BlkioWeight\": 0,\n            \"BlkioWeightDevice\": [],\n            \"BlkioDeviceReadBps\": null,\n            \"BlkioDeviceWriteBps\": null,\n            \"BlkioDeviceReadIOps\": null,\n            \"BlkioDeviceWriteIOps\": null,\n            \"CpuPeriod\": 0,\n            \"CpuQuota\": 0,\n            \"CpuRealtimePeriod\": 0,\n            \"CpuRealtimeRuntime\": 0,\n            \"CpusetCpus\": \"\",\n            \"CpusetMems\": \"\",\n            \"Devices\": [],\n            \"DeviceCgroupRules\": null,\n            \"DeviceRequests\": null,\n            \"KernelMemory\": 0,\n            \"KernelMemoryTCP\": 0,\n            \"MemoryReservation\": 0,\n            \"MemorySwap\": 0,\n            \"MemorySwappiness\": null,\n            \"OomKillDisable\": false,\n            \"PidsLimit\": null,\n            \"Ulimits\": null,\n            \"CpuCount\": 0,\n            \"CpuPercent\": 0,\n            \"IOMaximumIOps\": 0,\n            \"IOMaximumBandwidth\": 0,\n            \"MaskedPaths\": [\n                \"/proc/asound\",\n                \"/proc/acpi\",\n                \"/proc/kcore\",\n                \"/proc/keys\",\n                \"/proc/latency_stats\",\n                \"/proc/timer_list\",\n                \"/proc/timer_stats\",\n                \"/proc/sched_debug\",\n                \"/proc/scsi\",\n                \"/sys/firmware\"\n            ],\n            \"ReadonlyPaths\": [\n                \"/proc/bus\",\n                \"/proc/fs\",\n                \"/proc/irq\",\n                \"/proc/sys\",\n                \"/proc/sysrq-trigger\"\n            ]\n        &#125;,\n        \"GraphDriver\": &#123;\n            \"Data\": &#123;\n                \"LowerDir\": \"/var/lib/docker/overlay2/42902b2f7fed18c296c035b20b6c526a0ec3c5f566f48bbdba851c272d8138d4-init/diff:/var/lib/docker/overlay2/58ed84f3691674f7f7c7f99ea4252eda0200c8161cb455a0251204c8507ed25b/diff:/var/lib/docker/overlay2/0a7d19be8978f302b7d3224fb363679fb8c218fae422da9f95464d41169c0b3c/diff:/var/lib/docker/overlay2/6c088bb628ab7820b0d0d6d95cd03f1f3999114da446c513b5f5014e6583a0fa/diff:/var/lib/docker/overlay2/24932a2ad99af3baac795cd7c151d914b0db8843d4097d0bacd7eb7dea89343e/diff:/var/lib/docker/overlay2/f2ab2e434f230a0227dc277e3a6e3141e2c560b183bcb432a624072f4cabc4cf/diff\",\n                \"MergedDir\": \"/var/lib/docker/overlay2/42902b2f7fed18c296c035b20b6c526a0ec3c5f566f48bbdba851c272d8138d4/merged\",\n                \"UpperDir\": \"/var/lib/docker/overlay2/42902b2f7fed18c296c035b20b6c526a0ec3c5f566f48bbdba851c272d8138d4/diff\",\n                \"WorkDir\": \"/var/lib/docker/overlay2/42902b2f7fed18c296c035b20b6c526a0ec3c5f566f48bbdba851c272d8138d4/work\"\n            &#125;,\n            \"Name\": \"overlay2\"\n        &#125;,\n        \"Mounts\": [],\n        \"Config\": &#123;\n            \"Hostname\": \"531d1da7106a\",\n            \"Domainname\": \"\",\n            \"User\": \"\",\n            \"AttachStdin\": false,\n            \"AttachStdout\": false,\n            \"AttachStderr\": false,\n            \"ExposedPorts\": &#123;\n                \"80/tcp\": &#123;&#125;\n            &#125;,\n            \"Tty\": true,\n            \"OpenStdin\": true,\n            \"StdinOnce\": false,\n            \"Env\": [\n                \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n                \"NGINX_VERSION=1.19.3\",\n                \"NJS_VERSION=0.4.4\",\n                \"PKG_RELEASE=1~buster\"\n            ],\n            \"Cmd\": [\n                \"nginx\",\n                \"-g\",\n                \"daemon off;\"\n            ],\n            \"Image\": \"nginx\",\n            \"Volumes\": null,\n            \"WorkingDir\": \"\",\n            \"Entrypoint\": [\n                \"/docker-entrypoint.sh\"\n            ],\n            \"OnBuild\": null,\n            \"Labels\": &#123;\n                \"maintainer\": \"NGINX Docker Maintainers &lt;docker-maint@nginx.com>\"\n            &#125;,\n            \"StopSignal\": \"SIGTERM\"\n        &#125;,\n        \"NetworkSettings\": &#123;\n            \"Bridge\": \"\",\n            \"SandboxID\": \"039b5861e5a286e6f4c2f545703fd35d75a7fd1676305692344818db40d58630\",\n            \"HairpinMode\": false,\n            \"LinkLocalIPv6Address\": \"\",\n            \"LinkLocalIPv6PrefixLen\": 0,\n            \"Ports\": &#123;\n                \"80/tcp\": [\n                    &#123;\n                        \"HostIp\": \"0.0.0.0\",\n                        \"HostPort\": \"8000\"\n                    &#125;\n                ]\n            &#125;,\n            \"SandboxKey\": \"/var/run/docker/netns/039b5861e5a2\",\n            \"SecondaryIPAddresses\": null,\n            \"SecondaryIPv6Addresses\": null,\n            \"EndpointID\": \"95aa24006b353356739ee27db494c787bc8ddb669ac06934f71fb17ac1a6fdb8\",\n            \"Gateway\": \"172.17.0.1\",\n            \"GlobalIPv6Address\": \"\",\n            \"GlobalIPv6PrefixLen\": 0,\n            \"IPAddress\": \"172.17.0.2\",\n            \"IPPrefixLen\": 16,\n            \"IPv6Gateway\": \"\",\n            \"MacAddress\": \"02:42:ac:11:00:02\",\n            \"Networks\": &#123;\n                \"bridge\": &#123;\n                    \"IPAMConfig\": null,\n                    \"Links\": null,\n                    \"Aliases\": null,\n                    \"NetworkID\": \"248f83eea2e6ec52b9e7218be989a2fce09365fe57fdb9c7ce0af6f52ec2cc5a\",\n                    \"EndpointID\": \"95aa24006b353356739ee27db494c787bc8ddb669ac06934f71fb17ac1a6fdb8\",\n                    \"Gateway\": \"172.17.0.1\",\n                    \"IPAddress\": \"172.17.0.2\",\n                    \"IPPrefixLen\": 16,\n                    \"IPv6Gateway\": \"\",\n                    \"GlobalIPv6Address\": \"\",\n                    \"GlobalIPv6PrefixLen\": 0,\n                    \"MacAddress\": \"02:42:ac:11:00:02\",\n                    \"DriverOpts\": null\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n]\n\n\n\n# 查看容器IP\ndocker inspect --format='&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;' myMysql\n\n\n\nstats显示容器使用的资源信息\n命令格式docker stats [OPTIONS] [CONTAINER...]\n\n使用示例#每秒执行一次\ndocker stats mywebserver\n\nCONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS\n69600e5663f0        mywebserver         0.00%               1.887MiB / 1.945GiB   0.09%               1.05kB / 0B         0B / 0B             2\n\n\n\n\npause&#x2F;unpause\ndocker pause :暂停容器中所有的进程。\n\ndocker unpause :恢复容器中所有的进程。\n\n\n命令格式docker pause [OPTIONS] CONTAINER [CONTAINER...]\ndocker unpause [OPTIONS] CONTAINER [CONTAINER...]\n\n使用示例#暂停\ndocker pause webserver\n\n#恢复\ndocker unpause webserver\n\nstart&#x2F;stop&#x2F;restart\nstart :启动一个或多个已经被停止的容器\nstop :停止一个运行中的容器\nrestart :重启容器\n\n命令格式docker start [OPTIONS] CONTAINER [CONTAINER...]\ndocker stop [OPTIONS] CONTAINER [CONTAINER...]\ndocker restart [OPTIONS] CONTAINER [CONTAINER...]\n\n常用参数使用示例#启动已被停止的容器\ndocker start webserver\n\n#停止运行中的容器\ndocker stop webserver\n\n#重启容器webserver\ndocker restart webserve\n\n\n\n\n\n","slug":"docker_container","date":"2021-06-22T10:49:36.000Z","categories_index":"Docker","tags_index":"CMD","author_index":"ThinkBIM"},{"id":"1e08831eb8b047eb11c7bd106d7d86e1","title":"Docker镜像常用命令-Image","content":"search查找镜像\n命令格式docker search [OPTIONS] TERM\n\n使用示例docker search nginx\nNAME                               DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED\nnginx                              Official build of Nginx.                        13865               [OK]                \njwilder/nginx-proxy                Automated Nginx reverse proxy for docker con…   1896                                    [OK]\nricharvey/nginx-php-fpm            Container running Nginx + PHP-FPM capable of…   791                                     [OK]\n\n#查看stars>=100 nginx镜像\nsearch -f stars=100 nginx\nNAME                      DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED\nnginx                     Official build of Nginx.                        13865               [OK]                \njwilder/nginx-proxy       Automated Nginx reverse proxy for docker con…   1896                                    [OK]\nricharvey/nginx-php-fpm   Container running Nginx + PHP-FPM capable of…   791                                     [OK]\nlinuxserver/nginx         An Nginx container, brought to you by LinuxS…   127\n\n参数说明\nNAME  镜像仓库源的名称\n\nDESCRIPTION 镜像的描述\n\nOFFICIAL  是否 docker 官方发布\n\nSTARS 类似 Github 里面的 star，表示点赞、喜欢的意思\n\nAUTOMATED 自动构建\n\n\ndocker search nginx\nNAME                               DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED\nnginx                              Official build of Nginx.                        13865               [OK]                \njwilder/nginx-proxy                Automated Nginx reverse proxy for docker con…   1896                                    [OK]\nricharvey/nginx-php-fpm            Container running Nginx + PHP-FPM capable of…   791                                     [OK]\n\n#查看stars>=100 nginx镜像\nsearch -f stars=100 nginx\nNAME                      DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED\nnginx                     Official build of Nginx.                        13865               [OK]                \njwilder/nginx-proxy       Automated Nginx reverse proxy for docker con…   1896                                    [OK]\nricharvey/nginx-php-fpm   Container running Nginx + PHP-FPM capable of…   791                                     [OK]\nlinuxserver/nginx         An Nginx container, brought to you by LinuxS…   127\n\npull从镜像仓库中拉取或者更新指定镜像\n命令格式docker pull [OPTIONS] NAME[:TAG|@DIGEST]\n\n使用示例docker pull hello-world\nUsing default tag: latest\nlatest: Pulling from library/hello-world\n0e03bdcc26d7: Pull complete \nDigest: sha256:8c5aeeb6a5f3ba4883347d3747a7249f491766ca1caa47e5da5dfcf6b9b717c0\nStatus: Downloaded newer image for hello-world:latest\ndocker.io/library/hello-world:latest\n\n# 下载账号仓库的镜像\ndocker pull hateghost/docker:latest\n\npush将本地的镜像上传到镜像仓库,要先登陆到镜像仓库\n使用示例#上传本地镜像hateghost/docker:latest到镜像仓库中。\ndocker push hateghost/docker:latest\nThe push refers to repository [docker.io/hateghost/docker]\n9c27e219663c: Mounted from library/hello-world \nlatest: digest: sha256:90659bf80b44ce6be8234e6ff90a1ac34acbeb826903b02cfa0da11c82cbc042 size: 525\n\n\n\nimages列出本地镜像\n命令格式docker images [OPTIONS] [REPOSITORY[:TAG]]\n\n\n使用示例docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nwebserver           v2                  8c1b66feb178        3 hours ago         131MB\n\n\n\nrmi删除本地一个或多少镜像\n命令格式docker rmi [OPTIONS] IMAGE [IMAGE...]\n\n常用参数\n**-f :**强制删除；\n\n**–no-prune :**不移除该镜像的过程镜像，默认移除；\n\n\n使用示例docker rmi hateghost/docker:latest\n\n\n\nsave将指定镜像保存成 tar 归档文件\n常用参数**-o :**输出到的文件\n使用示例docker save -o webserver-v2.tar webserver:v2\nls\nDockerfile       webserver-v2.tar webserver.tar\ndocker rmi webserver:v2\nUntagged: webserver:v2\nDeleted: sha256:8c1b66feb1786e67dc240cb83b8ec3adabd88c935187f2d95dd6d298303965e3\n Docker docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nwebserver           v1                  a3038edc18d1        3 hours ago         133MB\n\n\n\n\nbuild使用 Dockerfile 创建镜像\n常用参数\n–build-arg&#x3D;[] : 设置镜像创建时的变量；\n\n–cpu-shares : 设置 cpu 使用权重；\n\n–cpu-period : 限制 CPU CFS周期；\n\n–cpu-quota : 限制 CPU CFS配额；\n\n–cpuset-cpus : 指定使用的CPU id；\n\n–cpuset-mems : 指定使用的内存 id；\n\n–disable-content-trust : 忽略校验，默认开启；\n\n-f : 指定要使用的Dockerfile路径；\n\n–force-rm : 设置镜像过程中删除中间容器；\n\n–isolation : 使用容器隔离技术；\n\n–label&#x3D;[] : 设置镜像使用的元数据；\n\n-m : 设置内存最大值；\n\n–memory-swap : 设置Swap的最大值为内存+swap，”-1”表示不限swap；\n\n–no-cache : 创建镜像的过程不使用缓存；\n\n–pull : 尝试去更新镜像的新版本；\n\n–quiet, -q : 安静模式，成功后只输出镜像 ID；\n\n–rm : 设置镜像成功后删除中间容器；\n\n–shm-size : 设置&#x2F;dev&#x2F;shm的大小，默认值是64M；\n\n–ulimit : Ulimit配置。\n\n–tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。\n\n–network: 默认 default。在构建期间设置RUN指令的网络模式\n\n\n使用示例#创建Dockerfile文件\n\nvi Dockerfile\n\nFROM webserver:v1\n\n\ndocker build .\nSending build context to Docker daemon  2.048kB\nStep 1/1 : FROM webserver:v1\n ---> a3038edc18d1\nSuccessfully built a3038edc18d1\n\n#指定Dockerfile文件\ndocker build -f /etc/Dockerfile .\n#指定名称\ndocker build -t webserver:v2 .\n\n##创建镜像的过程不使用缓存\ndocker build -t webserver:v2 --no-cache .\n\n\n\n\ntag标记本地镜像，将其归入某一仓库，重命名\n使用示例docker tag hello-world:latest hateghost/docker:latest\ndocker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nhateghost/docker    latest              bf756fb1ae65        9 months ago        13.3kB\nhello-world         latest              bf756fb1ae65        9 months ago        13.3kB\n\n\n\nhistory导入使用 docker save 命令导出的镜像\n常用参数\n-H : 以可读的格式打印镜像大小和日期，默认为true；\n\n–no-trunc : 显示完整的提交记录；\n\n-q : 仅列出提交记录ID\n\n\n使用示例docker history runoob/ubuntu:v3\nIMAGE             CREATED           CREATED BY                                      SIZE      COMMENT\n4e3b13c8a266      3 months ago      /bin/sh -c #(nop) CMD [\"/bin/bash\"]             0 B                 \n&lt;missing>         3 months ago      /bin/sh -c sed -i 's/^#\\s*\\(deb.*universe\\)$/   1.863 kB            \n&lt;missing>         3 months ago      /bin/sh -c set -xe   &amp;&amp; echo '#!/bin/sh' > /u   701 B               \n&lt;missing>         3 months ago      /bin/sh -c #(nop) ADD file:43cb048516c6b80f22   136.3 MB\n\nimport从归档文件中创建镜像\n常用参数\n-c : 应用docker 指令创建镜像；\n\n-m : 提交时的说明文字；\n\n\n使用示例docker import ./webserver.tar webserver:v2\nsha256:8c1b66feb1786e67dc240cb83b8ec3adabd88c935187f2d95dd6d298303965e3\ndocker history webserver:v2\nIMAGE               CREATED             CREATED BY          SIZE                COMMENT\n8c1b66feb178        15 seconds ago                          131MB               Imported from -\n\n\n\n\n\nload导入使用 docker save 命令导出的镜像\n使用示例docker load -i webserver-v2.tar \nLoaded image: webserver:v2\ndocker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nwebserver           v2                  8c1b66feb178        3 hours ago         131MB\nwebserver           v1                  a3038edc18d1        3 hours ago         133MB\n\ncreate创建一个新的容器但不启动它\n使用示例docker create --name webnewserver nginx\n9e14a8a86838aae088775dec302f5764513b510db681e8540dfca4fe2b94624c\ndocker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                   PORTS                  NAMES\n9e14a8a86838        nginx               \"/docker-entrypoint.…\"   30 seconds ago      Created                                         webnewserver\n531d1da7106a        nginx               \"/docker-entrypoint.…\"   13 hours ago        Up 3 hours               0.0.0.0:8000->80/tcp   webserver\nd71dcdf7c42b        docker101tutorial   \"/docker-entrypoint.…\"   2 months ago        Exited (0) 6 weeks ago                          docker-tutorial\n\n\n\n\nupdatedocker update --cpus 2 webaserver\n\nlogin&#x2F;logout登录&#x2F;退出\n命令格式docker login [OPTIONS] [SERVER]\ndocker logout [OPTIONS] [SERVER]\n\n\n使用示例#登录\ndocker login\nLogin with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.\nUsername: hateghost\nPassword:\n\ndocker login -u 用户名 -p 密码\n\n#登出\nDocker docker logout\nRemoving login credentials for https://index.docker.io/v1/\n\n\n\n\n\n\n\n\n\n\n","slug":"docker_image","date":"2021-06-21T10:49:36.000Z","categories_index":"Docker","tags_index":"CMD","author_index":"ThinkBIM"},{"id":"25b2e1f1a3628fcb85a37c9e4577b031","title":"Docker常用命令-Info","content":"Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口\n\nDocker 官网\nDoc 文档\nHub Hub\n\nDocker入门info显示 Docker 系统信息，包括镜像和容器数\n命令格式docker info [OPTIONS]\n常用参数使用实例docker info\nClient:\n Debug Mode: false\n\nServer:\n Containers: 1\n  Running: 0\n  Paused: 0\n  Stopped: 1\n Images: 29\n Server Version: 19.03.13\n Storage Driver: overlay2\n  Backing Filesystem: extfs\n  Supports d_type: true\n  Native Overlay Diff: true\n Logging Driver: json-file\n Cgroup Driver: cgroupfs\n Plugins:\n  Volume: local\n  Network: bridge host ipvlan macvlan null overlay\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\n Swarm: inactive\n Runtimes: runc\n Default Runtime: runc\n Init Binary: docker-init\n containerd version: 8fba4e9a7d01810a393d5d25a3621dc101981175\n runc version: dc9208a3303feef5b3839f4323d9beb36df0a9dd\n init version: fec3683\n Security Options:\n  seccomp\n   Profile: default\n Kernel Version: 4.19.76-linuxkit\n Operating System: Docker Desktop\n OSType: linux\n Architecture: x86_64\n CPUs: 2\n Total Memory: 1.945GiB\n Name: docker-desktop\n ID: QTGW:P4FS:GJ7T:ZC3F:RRFB:ACDX:YYE5:TOPG:4GSQ:FFM5:6GFM:3CEN\n Docker Root Dir: /var/lib/docker\n Debug Mode: true\n  File Descriptors: 39\n  Goroutines: 46\n  System Time: 2020-10-16T01:27:03.542085876Z\n  EventsListeners: 3\n HTTP Proxy: gateway.docker.internal:3128\n HTTPS Proxy: gateway.docker.internal:3129\n Registry: https://index.docker.io/v1/\n Labels:\n Experimental: false\n Insecure Registries:\n  127.0.0.0/8\n Live Restore Enabled: false\n Product License: Community Engine\n\n\nversion显示 Docker 版本信息\n命令格式docker version [OPTIONS]\n常用参数\n-f 指定返回值的模板文件\n\n使用实例docker version\nClient: Docker Engine - Community\n Cloud integration  0.1.18\n Version:           19.03.13\n API version:       1.40\n Go version:        go1.13.15\n Git commit:        4484c46d9d\n Built:             Wed Sep 16 16:58:31 2020\n OS/Arch:           darwin/amd64\n Experimental:      false\n\nServer: Docker Engine - Community\n Engine:\n  Version:          19.03.13\n  API version:      1.40 (minimum version 1.12)\n  Go version:       go1.13.15\n  Git commit:       4484c46d9d\n  Built:            Wed Sep 16 17:07:04 2020\n  OS/Arch:          linux/amd64\n  Experimental:     false\n containerd:\n  Version:          v1.3.7\n  GitCommit:        8fba4e9a7d01810a393d5d25a3621dc101981175\n runc:\n  Version:          1.0.0-rc10\n  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd\n docker-init:\n  Version:          0.18.0\n  GitCommit:        fec3683\n\n\n\n\nFAQ\n\n\n\n\n\n\nDocker:Error response from daemon\nError response from daemon: Get https://registry-1.docker.io/v2/: read tcp 172.17.29.69:44568-&gt;52.55.168.20:443: read: connection reset by peer\n\n\nError response from daemon\n\n通过dig @114.114.114.114 registry-1.docker.io找到可用IP\ndig @114.114.114.114 registry-1.docker.io\n; &lt;&lt;>> DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.5 &lt;&lt;>> @114.114.114.114 registry-1.docker.io\n; (1 server found)\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 47457\n;; flags: qr rd ra; QUERY: 1, ANSWER: 8, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 512\n;; QUESTION SECTION:\n;registry-1.docker.io.          IN      A\n\n;; ANSWER SECTION:\nregistry-1.docker.io.   33      IN      A       35.169.249.115\nregistry-1.docker.io.   33      IN      A       18.214.230.110\nregistry-1.docker.io.   33      IN      A       34.238.187.50\nregistry-1.docker.io.   33      IN      A       52.72.232.213\nregistry-1.docker.io.   33      IN      A       34.197.211.151\nregistry-1.docker.io.   33      IN      A       52.55.168.20\nregistry-1.docker.io.   33      IN      A       54.152.28.6\nregistry-1.docker.io.   33      IN      A       34.231.251.252\n\n;; Query time: 10 msec\n;; SERVER: 114.114.114.114#53(114.114.114.114)\n;; WHEN: Wed Jul 21 11:44:46 CST 2021\n;; MSG SIZE  rcvd: 177\n\n修改&#x2F;etc&#x2F;hosts\necho \"35.169.249.115 registry-1.docker.io\" >> /etc/hosts\n\n\n\n","slug":"docker_info","date":"2021-06-20T10:49:36.000Z","categories_index":"Docker","tags_index":"CMD","author_index":"ThinkBIM"},{"id":"f6e9fd9955c3dd58b9f62f632d803e86","title":"Logrotate Uses 100% CPU Issue on CentOS","content":"查看 logrotate.status 文件tail /var/lib/logrotate/logrotate.status\n\n\n\n查看文件大小ls &#x2F;var&#x2F;lib&#x2F;logrotate&#x2F;logrotate.status  -lh\n\n\n\n检查 logrotate 的配置sudo &#x2F;usr&#x2F;sbin&#x2F;logrotate -d &#x2F;etc&#x2F;logrotate.conf\n\n\n\ncron 任务cat &#x2F;etc&#x2F;cron.daily&#x2F;logrotate\n\n\n\n\n\n\n\n","slug":"logrotate","date":"2021-05-20T04:00:00.000Z","categories_index":"Liunx","tags_index":"Logrotate","author_index":"ThinkBIM"},{"id":"b6f8538f809f36a68432228892a1f791","title":"Aurora 主题","content":"基于Hexo框架开发，使用 Aurora 主题。Aurora 是使用极光颜色和 UI 元素的下一代主题。它给你平滑流畅的色彩和未来感。\n\nHexo 框架\nhexo-theme-aurora 主题\n\n安装主题&amp;主题配置# npm安装主题\nnpm install hexo-theme-aurora --save\n# 主题配置模板\ncp -rf ./node_modules/hexo-theme-aurora/_config.yml ./_config.aurora.yml\n\n\n\n\n\n修改 _config.yml# URL\n## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\nurl: https://username.github.io/project\npermalink: /post/:title.html\npermalink_defaults:\npretty_urls:\n  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n  \n  \n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: aurora\n\n运行环境hexo clean &amp; hexo g &amp; hexo server\n\n写作\n推荐文章 feature: true\n---\ntitle: Article Title\ndate: 2020-08-15 18:49:36\ntags:\n  - Tag\ncategories:\n  - Cate\ncover: https://domo.png\nfeature: true\n---\n\n分类和标签\ncategories:\n - Diary\ntags:\n - PS3\n - Games\n\n# 此时这篇文章同时包括三个分类： PlayStation 和 Games 分别都是父分类 Diary 的子分类，同时 Life 是一个没有子分类的分类。\ncategories:\n - [Diary, PlayStation]\n - [Diary, Games]\n - [Life]\n\n\n\n\n\n\n\nTip\nTip容器\n\n\n\n\n\n\n\n\nWarning\nWarning 容器\n\n\n\n\n\n\n\n\nDanger\nDanger 容器\n\n\n点击查看\nFusce rutrum venenatis eros in hendrerit. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nullam eget risus egestas, aliquet ipsum sed, volutpat tortor. Proin finibus tortor ac mauris finibus rutrum. Nullam tincidunt arcu eu urna ullamcorper, eu ultricies turpis ornare. Morbi id sollicitudin orci. Proin lobortis vehicula nibh a ornare. Cras sodales eu ligula quis fermentum. Proin eu ultrices leo, quis iaculis justo. Sed dictum, nulla sit amet imperdiet commodo, libero sapien semper justo, ut lobortis elit nunc vitae ante. Nullam lobortis odio quam, ac condimentum elit posuere vitae. Sed ornare, odio et rutrum varius, lorem eros gravida urna, in pharetra sapien justo non magna.\n\ndetails content\ndetails new line\n\nconsole.log('hello world')\n\n\n\nFAQ\n主题官网未说明 主题更改。例如 theme: aurora\nnode-14 版本兼容问题，建议使用 node-12\n\n","slug":"test","date":"2021-05-20T04:00:00.000Z","categories_index":"Hexo","tags_index":"Theme","author_index":"ThinkBIM"}]